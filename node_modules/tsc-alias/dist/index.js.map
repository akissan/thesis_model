{"version":3,"file":"index.js","sourceRoot":"","sources":["../src/index.ts"],"names":[],"mappings":"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","sourcesContent":["import { watch } from 'chokidar';\nimport { existsSync, promises as fsp } from 'fs';\nimport { sync } from 'globby';\nimport * as normalizePath from 'normalize-path';\nimport {\n  basename,\n  dirname,\n  isAbsolute,\n  normalize,\n  relative,\n  resolve\n} from 'path';\nimport {\n  existsResolvedAlias,\n  getAbsoluteAliasPath,\n  getProjectDirPathInOutDir,\n  loadConfig\n} from './helpers';\nimport {\n  newStringRegex,\n  Output,\n  replaceSourceImportPaths,\n  resolveFullImportPaths,\n  TrieNode\n} from './utils';\n\nexport interface ReplaceTscAliasPathsOptions {\n  configFile?: string;\n  outDir?: string;\n  watch?: boolean;\n  silent?: boolean;\n  resolveFullPaths?: boolean;\n}\n\ninterface Alias {\n  shouldPrefixMatchWildly: boolean;\n  prefix: string;\n  basePath: string;\n  path: string;\n  paths: string[];\n  isExtra: boolean;\n}\n\ntype Assertion = (claim: any, message: string) => asserts claim;\n\nexport async function replaceTscAliasPaths(\n  options: ReplaceTscAliasPathsOptions = {\n    watch: false,\n    silent: false\n  }\n) {\n  const output = new Output(options.silent);\n  output.info('=== tsc-alias starting ===');\n\n  const configFile = !options.configFile\n    ? resolve(process.cwd(), 'tsconfig.json')\n    : !isAbsolute(options.configFile)\n    ? resolve(process.cwd(), options.configFile)\n    : options.configFile;\n\n  const assert: Assertion = (claim, message) =>\n    claim || output.error(message, true);\n\n  assert(existsSync(configFile), `Invalid file path => ${configFile}`);\n\n  let { baseUrl = './', outDir, paths } = loadConfig(configFile);\n  if (options.outDir) outDir = options.outDir;\n\n  assert(outDir, 'compilerOptions.outDir is not set');\n\n  const configDir: string = normalizePath(dirname(configFile));\n\n  const outPath = normalizePath(normalize(configDir + '/' + outDir));\n\n  const confDirParentFolderName: string = basename(configDir);\n\n  let hasExtraModule = false;\n  let configDirInOutPath: string = null;\n  let relConfDirPathInOutPath: string;\n\n  const AliasTrie = new TrieNode<Alias>();\n\n  Object.keys(paths)\n    .map((alias) => {\n      const _paths = paths[alias].map((path) => {\n        path = path.replace(/\\*$/, '').replace(/\\.([mc])?ts(x)?$/, '.$1js$2');\n        if (isAbsolute(path)) {\n          path = relative(configDir, path);\n        }\n        return path;\n      });\n\n      const path = _paths[0];\n\n      if (normalize(path).includes('..')) {\n        if (!configDirInOutPath) {\n          configDirInOutPath = getProjectDirPathInOutDir(\n            outPath,\n            confDirParentFolderName\n          );\n\n          // Find relative path access of configDir in outPath\n          if (configDirInOutPath) {\n            hasExtraModule = true;\n            const stepsbackPath = relative(configDirInOutPath, outPath);\n            const splitStepBackPath = normalizePath(stepsbackPath).split('/');\n            const nbOfStepBack = splitStepBackPath.length;\n            const splitConfDirInOutPath = configDirInOutPath.split('/');\n\n            let i = 1;\n            const splitRelPath: string[] = [];\n            while (i <= nbOfStepBack) {\n              splitRelPath.unshift(\n                splitConfDirInOutPath[splitConfDirInOutPath.length - i]\n              );\n              i++;\n            }\n            relConfDirPathInOutPath = splitRelPath.join('/');\n          }\n        }\n      }\n\n      return {\n        shouldPrefixMatchWildly: alias.endsWith('*'),\n        prefix: alias.replace(/\\*$/, ''),\n        basePath: null,\n        path,\n        paths: _paths,\n        isExtra: null\n      };\n    })\n    .filter(({ prefix }) => prefix)\n    /*********** Find basepath of aliases *****************/\n    .forEach((alias) => {\n      if (normalize(alias.path).includes('..')) {\n        const tempBasePath = normalizePath(\n          normalize(\n            `${configDir}/${outDir}/${\n              hasExtraModule && relConfDirPathInOutPath\n                ? relConfDirPathInOutPath\n                : ''\n            }/${baseUrl}`\n          )\n        );\n\n        const absoluteBasePath = normalizePath(\n          normalize(`${tempBasePath}/${alias.path}`)\n        );\n        if (existsResolvedAlias(absoluteBasePath)) {\n          alias.isExtra = false;\n          alias.basePath = tempBasePath;\n        } else {\n          alias.isExtra = true;\n          alias.basePath = absoluteBasePath;\n        }\n      } else if (hasExtraModule) {\n        alias.isExtra = false;\n        alias.basePath = normalizePath(\n          normalize(\n            `${configDir}/${outDir}/${relConfDirPathInOutPath}/${baseUrl}`\n          )\n        );\n      } else {\n        alias.basePath = normalizePath(normalize(`${configDir}/${outDir}`));\n        alias.isExtra = false;\n      }\n\n      // Add all aliases to AliasTrie.\n      AliasTrie.add(alias.prefix, alias);\n    });\n\n  const replaceImportStatement = ({\n    orig,\n    file,\n    alias\n  }: {\n    orig: string;\n    file: string;\n    alias: Alias;\n  }): string => {\n    const requiredModule = orig.match(newStringRegex())?.groups?.path;\n    assert(\n      typeof requiredModule == 'string',\n      `Unexpected import statement pattern ${orig}`\n    );\n    const isAlias = alias.shouldPrefixMatchWildly\n      ? // if the alias is like alias*\n        // beware that typescript expects requiredModule be more than just alias\n        requiredModule.startsWith(alias.prefix) &&\n        requiredModule !== alias.prefix\n      : // need to be a bit more careful if the alias doesn't ended with a *\n        // in this case the statement must be like either\n        // require('alias') or require('alias/path');\n        // but not require('aliaspath');\n        requiredModule === alias.prefix ||\n        requiredModule.startsWith(alias.prefix + '/');\n\n    if (isAlias) {\n      for (let i = 0; i < alias.paths.length; i++) {\n        const absoluteAliasPath = getAbsoluteAliasPath(\n          alias.basePath,\n          alias.paths[i]\n        );\n\n        // Check if path is valid.\n        if (\n          !existsResolvedAlias(\n            alias.prefix.length == requiredModule.length\n              ? normalizePath(absoluteAliasPath)\n              : normalizePath(\n                  `${absoluteAliasPath}/${requiredModule.replace(\n                    new RegExp(`^${alias.prefix}`),\n                    ''\n                  )}`\n                )\n          )\n        ) {\n          continue;\n        }\n\n        let relativeAliasPath: string = normalizePath(\n          relative(dirname(file), absoluteAliasPath)\n        );\n\n        if (!relativeAliasPath.startsWith('.')) {\n          relativeAliasPath = './' + relativeAliasPath;\n        }\n\n        const index = orig.indexOf(alias.prefix);\n        const newImportScript =\n          orig.substring(0, index) +\n          relativeAliasPath +\n          '/' +\n          orig.substring(index + alias.prefix.length);\n\n        const modulePath = newImportScript.match(newStringRegex()).groups.path;\n\n        return newImportScript.replace(modulePath, normalizePath(modulePath));\n      }\n    }\n    return orig;\n  };\n\n  const replaceBaseUrlImport = ({\n    orig,\n    file\n  }: {\n    orig: string;\n    file: string;\n  }): string => {\n    const requiredModule = orig.match(newStringRegex())?.groups?.path;\n    assert(\n      typeof requiredModule == 'string',\n      `Unexpected import statement pattern ${orig}`\n    );\n\n    // Check if import is already resolved.\n    if (requiredModule.startsWith('.')) {\n      return orig;\n    }\n\n    // If there are files matching the target, resolve the path.\n    if (existsResolvedAlias(`${outPath}/${requiredModule}`)) {\n      let relativePath: string = normalizePath(\n        relative(dirname(file), getAbsoluteAliasPath(outPath, ''))\n      );\n      if (!relativePath.startsWith('.')) {\n        relativePath = './' + relativePath;\n      }\n\n      const index = orig.indexOf(requiredModule);\n      const newImportScript =\n        orig.substring(0, index) + relativePath + '/' + orig.substring(index);\n\n      const modulePath = newImportScript.match(newStringRegex()).groups.path;\n      return newImportScript.replace(modulePath, normalizePath(modulePath));\n    }\n    return orig;\n  };\n\n  const replaceAlias = async (\n    file: string,\n    resolveFullPath?: boolean\n  ): Promise<boolean> => {\n    const code = await fsp.readFile(file, 'utf8');\n    let tempCode = code;\n\n    tempCode = replaceSourceImportPaths(tempCode, file, (orig) => {\n      // Lookup which alias should be used for this given requiredModule.\n      const alias = AliasTrie.search(\n        orig.match(newStringRegex())?.groups?.path\n      );\n      // If an alias is found replace it or return the original.\n      return alias\n        ? replaceImportStatement({\n            orig,\n            file,\n            alias\n          })\n        : orig;\n    });\n\n    tempCode = replaceSourceImportPaths(tempCode, file, (orig) =>\n      replaceBaseUrlImport({\n        orig,\n        file\n      })\n    );\n\n    // Fully resolve all import paths (not just aliased ones)\n    // *after* the aliases are resolved\n    if (resolveFullPath) {\n      tempCode = resolveFullImportPaths(tempCode, file);\n    }\n\n    if (code !== tempCode) {\n      await fsp.writeFile(file, tempCode, 'utf8');\n      return true;\n    }\n    return false;\n  };\n\n  // Finding files and changing alias paths\n  const globPattern = [\n    `${outPath}/**/*.{mjs,cjs,js,jsx,d.{mts,cts,ts,tsx}}`,\n    `!${outPath}/**/node_modules`\n  ];\n  const files = sync(globPattern, {\n    dot: true,\n    onlyFiles: true\n  });\n\n  // Make array with promises for file changes\n  // Wait for all promises to resolve\n  const replaceList = await Promise.all(\n    files.map((file) => replaceAlias(file, options?.resolveFullPaths))\n  );\n\n  // Count all changed files\n  const replaceCount = replaceList.reduce(\n    (prev, curr) => (curr ? ++prev : prev),\n    0\n  );\n\n  output.info(`${replaceCount} files were affected!`);\n  if (options.watch) {\n    output.info('[Watching for file changes...]');\n    const filesWatcher = watch(globPattern);\n    const tsconfigWatcher = watch(configFile);\n    const onFileChange = async (file: string) =>\n      await replaceAlias(file, options?.resolveFullPaths);\n    filesWatcher.on('add', onFileChange);\n    filesWatcher.on('change', onFileChange);\n    tsconfigWatcher.on('change', (_) => {\n      output.clear();\n      filesWatcher.close();\n      tsconfigWatcher.close();\n      replaceTscAliasPaths(options);\n    });\n  }\n}\n"]}